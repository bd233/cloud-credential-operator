// Code generated by MockGen. DO NOT EDIT.
// Source: ./client.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	ram "github.com/aliyun/alibaba-cloud-sdk-go/services/ram"
	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// AttachPolicyToUser mocks base method.
func (m *MockClient) AttachPolicyToUser(arg0 *ram.AttachPolicyToUserRequest) (*ram.AttachPolicyToUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachPolicyToUser", arg0)
	ret0, _ := ret[0].(*ram.AttachPolicyToUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachPolicyToUser indicates an expected call of AttachPolicyToUser.
func (mr *MockClientMockRecorder) AttachPolicyToUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachPolicyToUser", reflect.TypeOf((*MockClient)(nil).AttachPolicyToUser), arg0)
}

// CreatePolicy mocks base method.
func (m *MockClient) CreatePolicy(arg0 *ram.CreatePolicyRequest) (*ram.CreatePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePolicy", arg0)
	ret0, _ := ret[0].(*ram.CreatePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePolicy indicates an expected call of CreatePolicy.
func (mr *MockClientMockRecorder) CreatePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePolicy", reflect.TypeOf((*MockClient)(nil).CreatePolicy), arg0)
}

// DeletePolicy mocks base method.
func (m *MockClient) DeletePolicy(arg0 *ram.DeletePolicyRequest) (*ram.DeletePolicyResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePolicy", arg0)
	ret0, _ := ret[0].(*ram.DeletePolicyResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePolicy indicates an expected call of DeletePolicy.
func (mr *MockClientMockRecorder) DeletePolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePolicy", reflect.TypeOf((*MockClient)(nil).DeletePolicy), arg0)
}

// DetachPolicyFromUser mocks base method.
func (m *MockClient) DetachPolicyFromUser(arg0 *ram.DetachPolicyFromUserRequest) (*ram.DetachPolicyFromUserResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachPolicyFromUser", arg0)
	ret0, _ := ret[0].(*ram.DetachPolicyFromUserResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachPolicyFromUser indicates an expected call of DetachPolicyFromUser.
func (mr *MockClientMockRecorder) DetachPolicyFromUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachPolicyFromUser", reflect.TypeOf((*MockClient)(nil).DetachPolicyFromUser), arg0)
}
